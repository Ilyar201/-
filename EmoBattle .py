# meta developer: @Temchik107
# meta author: @xasterkarya
# meta name: EmojiRPSInline
# meta version: 1.0
# meta description: –ò–≥—Ä–∞ –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏

from .. import loader, utils
from telethon.tl.custom import Button

class EmojiRPSInline(loader.Module):
    """–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏"""
    strings = {"name": "EmojiRPSInline"}

    def __init__(self):
        self.games = {}

    async def minerpscmd(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É —Å –¥—Ä—É–≥–æ–º: .minerps @—é–∑–µ—Ä–Ω–µ–π–º"""
        args = utils.get_args_raw(message)
        if not args:
            await message.reply("–£–∫–∞–∂–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: .minerps @username")
            return

        chat_id = message.chat_id
        if chat_id in self.games:
            await message.reply("–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞.")
            return

        self.games[chat_id] = {
            "player1": message.sender_id,
            "player2": None,
            "moves": {}
        }

        buttons = [
            [Button.inline("‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", b"rps_move:scissors")],
            [Button.inline("ü™® –ö–∞–º–µ–Ω—å", b"rps_move:rock")],
            [Button.inline("üìÑ –ë—É–º–∞–≥–∞", b"rps_move:paper")]
        ]

        await message.reply(
            f"–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞ —Å {args}!\n–í—ã–±–∏—Ä–∞–π—Ç–µ —Å–≤–æ–π —Ö–æ–¥, –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
            buttons=buttons
        )

        self.games[chat_id]["player2_mention"] = args

    async def on_callback_query(self, call):
        data = call.data.decode("utf-8").split(":")
        if data[0] != "rps_move":
            return

        move = data[1]
        chat_id = call.peer_id.user_id if call.peer_id else call.chat_id

        if chat_id not in self.games:
            await call.answer("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞—á–∞—Ç–∞.")
            return

        game = self.games[chat_id]
        user_id = call.from_user.id

        if user_id not in [game["player1"], game["player2"]]:
            if game["player2"] is None:
                game["player2"] = user_id  # –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è
            else:
                await call.answer("–¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.")
                return

        if user_id in game["moves"]:
            await call.answer("–¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä.")
            return

        game["moves"][user_id] = move
        await call.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {self.emoji(move)}")

        if len(game["moves"]) == 2:
            await self.finish_game(chat_id, call)

    async def finish_game(self, chat_id, call):
        game = self.games[chat_id]
        p1, p2 = game["player1"], game["player2"]
        m1, m2 = game["moves"][p1], game["moves"][p2]

        result = (
            f"‚öîÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞\n\n"
            f"–ò–≥—Ä–æ–∫ 1 –≤—ã–±—Ä–∞–ª: {self.emoji(m1)}\n"
            f"–ò–≥—Ä–æ–∫ 2 –≤—ã–±—Ä–∞–ª: {self.emoji(m2)}\n\n"
        )

        winner = self.determine_winner(m1, m2)
        if winner == "draw":
            result += "–ù–∏—á—å—è!"
        elif winner == "p1":
            result += "‚ú® –ü–æ–±–µ–¥–∏–ª –ò–≥—Ä–æ–∫ 1!"
        else:
            result += "‚ú® –ü–æ–±–µ–¥–∏–ª –ò–≥—Ä–æ–∫ 2!"

        await call.edit(result, buttons=None)
        del self.games[chat_id]

    def determine_winner(self, move1, move2):
        rules = {"rock": "scissors", "scissors": "paper", "paper": "rock"}
        if move1 == move2:
            return "draw"
        if rules[move1] == move2:
            return "p1"
        return "p2"

    def emoji(self, move):
        return {
            "rock": "ü™® –ö–∞–º–µ–Ω—å",
            "scissors": "‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã",
            "paper": "üìÑ –ë—É–º–∞–≥–∞"
        }[move]