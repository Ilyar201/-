# meta developer: @Temchik107
# meta author: @xasterkarya
# meta name: EmojiRockPaperScissors
# meta version: 1.0

class EmojiRockPaperScissorsMod:
    def __init__(self):
        self.games = {}

        self.emojis = {
            "–∫–∞–º–µ–Ω—å": "ü™®",
            "–Ω–æ–∂–Ω–∏—Ü—ã": "‚úÇÔ∏è",
            "–±—É–º–∞–≥–∞": "üìÑ"
        }

    async def rpscmd(self, message):
        """–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞ —Å –¥—Ä—É–≥–æ–º. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .rps @username"""
        args = message.raw_text.split()
        if len(args) < 2:
            await message.reply("–£–∫–∞–∂–∏, —Å –∫–µ–º —Ö–æ—á–µ—à—å –∏–≥—Ä–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: .rps @username")
            return
        
        opponent = args[1]
        chat_id = message.chat_id
        self.games[chat_id] = {
            "player1": message.sender_id,
            "player2": None,
            "moves": {},
            "status": "waiting"
        }
        await message.reply(f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç {opponent}. –ù–∞–ø–∏—à–∏: .rpsaccept")

    async def rpsacceptcmd(self, message):
        """–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤ –Ω–∞ –∏–≥—Ä—É"""
        chat_id = message.chat_id
        if chat_id not in self.games or self.games[chat_id]["status"] != "waiting":
            await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤.")
            return

        self.games[chat_id]["player2"] = message.sender_id
        self.games[chat_id]["status"] = "playing"
        await message.reply("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –û–±–∞ –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å: .move –∫–∞–º–µ–Ω—å / .move –Ω–æ–∂–Ω–∏—Ü—ã / .move –±—É–º–∞–≥–∞")

    async def movecmd(self, message):
        """–°–¥–µ–ª–∞—Ç—å —Ö–æ–¥: .move –∫–∞–º–µ–Ω—å / –Ω–æ–∂–Ω–∏—Ü—ã / –±—É–º–∞–≥–∞"""
        chat_id = message.chat_id
        if chat_id not in self.games or self.games[chat_id]["status"] != "playing":
            await message.reply("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
            return

        move = message.raw_text.split()[1].lower()
        if move not in ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]:
            await message.reply("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞.")
            return

        player_id = message.sender_id
        if player_id not in [self.games[chat_id]["player1"], self.games[chat_id]["player2"]]:
            await message.reply("–¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.")
            return

        self.games[chat_id]["moves"][player_id] = move

        if len(self.games[chat_id]["moves"]) < 2:
            await message.reply("–•–æ–¥ –ø—Ä–∏–Ω—è—Ç. –ñ–¥–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞.")
        else:
            await self.finish_game(chat_id, message)

    async def finish_game(self, chat_id, message):
        moves = self.games[chat_id]["moves"]
        player1 = self.games[chat_id]["player1"]
        player2 = self.games[chat_id]["player2"]

        move1 = moves[player1]
        move2 = moves[player2]

        emoji1 = self.emojis[move1]
        emoji2 = self.emojis[move2]

        await message.reply(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:\n\n"
                            f"–ò–≥—Ä–æ–∫ 1 –≤—ã–±—Ä–∞–ª {move1} {emoji1}\n"
                            f"–ò–≥—Ä–æ–∫ 2 –≤—ã–±—Ä–∞–ª {move2} {emoji2}")

        result = self.determine_winner(move1, move2)
        if result == "draw":
            await message.reply("–ù–∏—á—å—è!")
        elif result == "player1":
            await message.reply("–ü–æ–±–µ–¥–∏–ª –ò–≥—Ä–æ–∫ 1!")
        else:
            await message.reply("–ü–æ–±–µ–¥–∏–ª –ò–≥—Ä–æ–∫ 2!")

        del self.games[chat_id]

    def determine_winner(self, move1, move2):
        if move1 == move2:
            return "draw"
        elif (move1 == "–∫–∞–º–µ–Ω—å" and move2 == "–Ω–æ–∂–Ω–∏—Ü—ã") or \
             (move1 == "–Ω–æ–∂–Ω–∏—Ü—ã" and move2 == "–±—É–º–∞–≥–∞") or \
             (move1 == "–±—É–º–∞–≥–∞" and move2 == "–∫–∞–º–µ–Ω—å"):
            return "player1"
        else:
            return "player2"